UPB mini project funkcije in prožilci

Veliko podprogramov ima podobne funkcije z različnimi parametri:
view_kraji() – vrne vse podatke o krajih
insert_kraji('test', 'test', NULL) – vnese nov kraj z podatki naziva, pošte ter velikega uporabnika, ki je lahko null
update_kraji('test', 'test', NULL, 555) – posodobi obstoječ kraj z podatki naziva, pošte, velikega uporabnika in ID kraja katerega posodablja
delete_kraji(554) – zbriše kraj z določenim ID-jem
view_razredi() – vrne vse podatke o razredih
insert_razredi('test') – vnese nov kraj z podatku imena
update_razredi('test', 5) – posodobi obstoječ kraj z podatku imena in ID razreda katerega posodablja
delete_razredi(5) – zbriše razred z določenim ID-jem
view_vrste() – vrne vse podatke o vrstah
insert_vrste('test', 4, 20) – vnese novo vrsto z podatki imena, ID razreda (tuji ključ) in ID vrste (tuji ključ). 
Poleg, še ta funkcija tudi vnese podatke v tabelo kraj_vrsta, kjer je mnogo-mnogo relacija med vrstam in krajem
update_vrste('nizaba', 2, 6) – posodobi obstoječo vrsto z podatki imena novega ID-ja in razreda in ID vrste katero posodablja
update_kraj_vrste (2, 6) – kliče se po klicu update_vrste ter posodobi kraj_vrsta glede na nov ID kraja in posodobljene vrste
delete_vrste(4) – zbriše vrsto z določenim ID-jem
view_by_kraj(553) – glede na ID kraja, vrne število koliko vrst je v tem kraju
view_by_vrste(3) – glede na ID vrste, vrne število koliko krajev ima to vrsto
log_vrste_podatki() – je trigger, ki ob insert ali update nad tabelo vrste, vodi evidenco vseh podatkov v tabeli log_vrste
view_settings() – vrne podatke o barvi pisave in ozadja v tabeli settings. Glede na podatke, se spremeni barva pisave in ozadja v aplikaciji.
update_settings(‘red’, ‘blue’) – spremeni vrednost barv pisave in ozadja v tabeli settings, takoj po tem se zopet kliče funkcija view_settings

KODA PODPROGRAMOV

VIEW KRAJI
CREATE OR REPLACE FUNCTION view_kraji()
RETURNS TABLE (id_k integer, ime character varying(60), posta character varying(4), veliki_uporabniki character varying(80))
AS 
$$
BEGIN
	RETURN QUERY (SELECT * FROM kraji ORDER BY id_k ASC);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT * FROM view_kraji();

INSERT KRAJ
CREATE OR REPLACE FUNCTION insert_kraji(kime character varying(60), kposta character varying(4), kvu character varying(80))
RETURNS void 
AS 
$$
BEGIN
	INSERT INTO kraji (ime, posta, veliki_uporabniki) 
	VALUES (kime, kposta, kvu);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT insert_kraji('test', 'test', NULL);

UPDATE KRAJ
CREATE OR REPLACE FUNCTION update_kraji(kime character varying(60), kposta character varying(4), kvu character varying(80), idkraja integer)
RETURNS void 
AS 
$$
BEGIN
	UPDATE kraji 
	SET ime=kime, posta=kposta, veliki_uporabniki=kvu
	WHERE id_k=(
		SELECT id_k
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k
            
        FROM
            kraji
    ) sub
WHERE
    RowNum = idkraja);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT update_kraji('test', 'test', NULL, 555);

DELETE KRAJI
CREATE OR REPLACE FUNCTION delete_kraji(idkraja integer)
RETURNS void 
AS 
$$
BEGIN
	DELETE FROM kraj_vrsta
	WHERE kraj_id = (
		SELECT kraj_id
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k
            
        FROM
            kraji
    ) sub
WHERE
    RowNum = idkraja);

	DELETE FROM kraji 
	WHERE id_k = (
		SELECT id_k
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k
            
        FROM
            kraji
    ) sub
WHERE
    RowNum = idkraja);
END;
$$
LANGUAGE 'plpgsql'; 
CALL:
SELECT delete_kraji(554); 


VIEW RAZREDI
CREATE OR REPLACE FUNCTION view_razredi()
RETURNS TABLE (id_r integer, naziv character varying(100))
AS 
$$
BEGIN
	RETURN QUERY (SELECT * FROM razredi ORDER BY id_r ASC);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT * FROM view_razredi();

INSERT RAZRED
CREATE OR REPLACE FUNCTION insert_razredi(rnaziv character varying(100))
RETURNS void 
AS 
$$
BEGIN
	INSERT INTO razredi(naziv) 
	VALUES (rnaziv);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT insert_razredi('test');

UPDATE RAZRED
CREATE OR REPLACE FUNCTION update_razredi(rnaziv character varying(100), idrazreda integer)
RETURNS void 
AS 
$$
BEGIN
	UPDATE razredi
	SET naziv=rnaziv
	WHERE id_r=(
		SELECT id_r
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_r) AS RowNum, id_r
            
        FROM
            razredi
    ) sub
WHERE
    RowNum = idrazreda);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT update_razredi('test', 5);

DELETE RAZRED
CREATE OR REPLACE FUNCTION delete_razredi(idrazreda  integer)
RETURNS void 
AS 
$$
BEGIN

	DELETE FROM razredi 
	WHERE id_r = (
		SELECT id_r
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_r) AS RowNum, id_r
            
        FROM
            razredi
    ) sub
WHERE
    RowNum = idrazreda);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT delete_razredi(5);


VIEW VRSTE
CREATE OR REPLACE FUNCTION view_vrste()
RETURNS TABLE (id_v integer, ime character varying(120), naziv_v character varying(100))
AS 
$$
BEGIN
	RETURN QUERY (SELECT v.id_v, v.ime, r.naziv FROM vrste v INNER JOIN razredi r ON r.id_r=v.razred_id ORDER BY v.id_v ASC);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT * FROM view_vrste();

INSERT VRSTE IN KRAJ_VRSTE
--!
Funkcija prvo vnese novo vrsto, nato pa doda novo vrsto v tabelo kraj_vrste, kjer vnese novo povprečno število (1, saj je bil 1 vnos), 
nato doda še id_kraja in id NOVO ustvarjene vrste
!-->
CREATE OR REPLACE FUNCTION insert_vrste(vime character varying(120), idrazreda integer, idkraja integer)
RETURNS void 
AS 
$$
BEGIN
	INSERT INTO vrste(ime, razred_id) 
	VALUES (vime, (
		SELECT id_r
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_r) AS RowNum, id_r
            
        FROM
            razredi
    ) sub
WHERE
    RowNum = idrazreda)
);

			INSERT INTO kraj_vrsta(povp_stevilo, kraj_id, vrsta_id)
			VALUES (1, (
				SELECT id_k
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

				FROM
					kraji
			) sub
		WHERE
			RowNum = idkraja), (SELECT MAX(id_v) FROM vrste)
	);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT insert_vrste('test', 4, 20);

UPDATE VRSTE
CREATE OR REPLACE FUNCTION update_vrste(vime character varying(120), idrazreda integer, idvrste integer)
RETURNS void 
AS 
$$
BEGIN
	UPDATE vrste
	SET ime=vime, 
	razred_id=(
		SELECT id_r
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_r) AS RowNum, id_r
            
        FROM
            razredi
    ) sub
WHERE
    RowNum = idrazreda)
	
	WHERE id_v=(
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT update_vrste('nizaba', 2, 6);

UPDATE SAMO KRAJ_VRSTE
--!
Če je ob update bil tudi spremenjen kraj vrste, kliče funkcijo za posodabljanje relacije med vrstam in krajih (kraj_vrste)
!-->
CREATE OR REPLACE FUNCTION update_kraj_vrste(idkraja integer, idvrste integer)
RETURNS void 
AS 
$$
BEGIN
	UPDATE kraj_vrsta
	SET kraj_id = (
				SELECT id_k
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

				FROM
					kraji
			) sub
		WHERE
			RowNum = idkraja), vrsta_id = (
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste)
	
	WHERE vrsta_id = (
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT update_kraj_vrste (2, 6);


DELETE VRSTE
CREATE OR REPLACE FUNCTION delete_vrste(idvrste integer)
RETURNS void 
AS 
$$
BEGIN
	DELETE FROM kraj_vrste
	WHERE vrsta_id = (
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste);
	
	DELETE FROM razredi 
	WHERE id_v = (
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste);
END;
$$
LANGUAGE 'plpgsql';

VIEW KOLIKO VRST V TEM KRAJU (FORM 1)
CREATE OR REPLACE FUNCTION view_by_kraj(idkraja integer)
RETURNS TABLE (id_kv bigint) AS 
$$
BEGIN
	RETURN QUERY (SELECT COUNT(kv.*)
		FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
		INNER JOIN vrste v ON v.id_v=kv.vrsta_id
		WHERE k.id_k=(
				SELECT id_k
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

				FROM
					kraji
			) sub
		WHERE
			RowNum = idkraja));
END;
$$
LANGUAGE 'plpgsql';
VIEW V KOLIKO KRAJIH TA VRSTA (FORM 1)
CREATE OR REPLACE FUNCTION view_by_vrste(idvrste integer)
RETURNS TABLE (id_kv bigint) AS 
$$
BEGIN
	RETURN QUERY (SELECT COUNT(kv.*)
		FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
		INNER JOIN vrste v ON v.id_v=kv.vrsta_id
		WHERE v.id_v=(
				SELECT id_v
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v

				FROM
					vrste
			) sub
		WHERE
			RowNum = idvrste));
END;
$$
LANGUAGE 'plpgsql';

TRIGGER INSERT V LOG TABELO
CREATE OR REPLACE FUNCTION log_vrste_podatki()
RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO log_vrste(log_id_v, log_ime, log_razred_id, datum_cas)
	VALUES (NEW.id_v, NEW.ime, NEW.razred_id, NOW());
RETURN NULL;
END;
$$ LANGUAGE 'plpgsql';
UPORABA TRIGGER
CREATE TRIGGER insert_log_vrste
AFTER INSERT OR UPDATE ON vrste
FOR EACH ROW EXECUTE PROCEDURE log_vrste_podatki();

VIEW SETTINGS
CREATE OR REPLACE FUNCTION view_settings()
RETURNS TABLE (id_s integer, font character varying(40), background character varying(40))
AS 
$$
BEGIN
	RETURN QUERY (SELECT * FROM settings ORDER BY id_s DESC LIMIT 1);
END;
$$
LANGUAGE 'plpgsql';

UPDATE SETTINGS
CREATE OR REPLACE FUNCTION update_settings(novfont character varying(40), novbackground character varying(40))
RETURNS void 
AS 
$$
BEGIN
	UPDATE settings
	SET font=novfont, background=novbackground;
END;
$$
LANGUAGE 'plpgsql';

INFO
ROW_NUMBER pri UPDATE in DELETE – če se zbriše en row, bo v listboxu drugačno število elementov kot id v bazi. 
Zato row_number primerja ID elementa, z vrstico row-a ter izbere ustreznega. Isto velja za tuje ključe pri VRSTAH
-------------------------------------------------------------------------------------------------------------------------------------------
ZASTARELE FUNKCIJE

VIEW KOLIKO VRST V TEM KRAJU (FORM 1)
SQL noče vrnat “record” v aplikaciji. Verjetna težava je izpis attributov iz dveh različnih tabel
CREATE OR REPLACE FUNCTION view_by_kraj(idkraja integer)
RETURNS TABLE (id_kv bigint, ime character varying(60)) AS 
$$
BEGIN
	RETURN QUERY (SELECT COUNT(kv.*), k.ime
		FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
		INNER JOIN vrste v ON v.id_v=kv.vrsta_id
		WHERE k.id_k=(
				SELECT id_k
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

				FROM
					kraji
			) sub
		WHERE
			RowNum = idkraja)
			GROUP BY k.ime);
END;
$$
LANGUAGE 'plpgsql';
VIEW V KOLIKO KRAJIH TA VRSTA (FORM 1)
SQL noče vrnat “record” v aplikaciji. Verjetna težava je izpis attributov iz dveh različnih tabel
CREATE OR REPLACE FUNCTION view_by_vrste(idvrste integer)
RETURNS TABLE (id_kv bigint, ime character varying(120)) AS 
$$
BEGIN
	RETURN QUERY (SELECT COUNT(kv.*), v.ime
		FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
		INNER JOIN vrste v ON v.id_v=kv.vrsta_id
		WHERE v.id_v=(
				SELECT id_v
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v

				FROM
					vrste
			) sub
		WHERE
			RowNum = idvrste)
			GROUP BY v.ime);
END;
$$
LANGUAGE 'plpgsql';


CREATE TRIGGER posodobi_povp_stevilo
AFTER INSERT OR UPDATE OR DELETE ON vrste
FOR EACH ROW EXECUTE PROCEDURE povp_stevila_kv();

CREATE OR REPLACE FUNCTION povp_stevila_kv()
RETURNS TRIGGER AS $$
BEGIN
	IF (tg_op = 'UPDATE') THEN
		UPDATE kraj_vrsta SET povp_stevilo=povp_stevilo-1
		WHERE vrsta_id=OLD.id_v;
		UPDATE kraj_vrsta SET povp_stevilo=povp_stevilo+1
		WHERE vrsta_id=NEW.id_v;
	END IF;
		IF (tg_op = 'DELETE') THEN
		UPDATE kraj_vrsta SET povp_stevilo=povp_stevilo-1
		WHERE vrsta_id=OLD.id_v;
	END IF;
	IF (tg_op = 'INSERT') THEN
		UPDATE kraj_vrsta SET povp_stevilo=povp_stevilo+1
		WHERE vrsta_id=NEW.id_v;
	END IF;

RETURN NULL;
END;
$$ 
LANGUAGE 'plpgsql';

INSERT VRSTE IN KRAJ_VRSTE
--!
Funkcija prvo vnese novo vrsto, nato pa doda novo vrsto v tabelo kraj_vrste, kjer vnese novo povprečno število (1, saj je bil 1 vnos), nato doda še id_kraja in id NOVO ustvarjene vrste
V if stavku gleda, če že obstaja vrsta v kraj_vrste, ki vsebuje isti id_kraja in isti id_vrste (kar ni mogoče, saj kraj_vrsta dobi čisto nov id vrste ki se pravkar ustvarila [vseeno bom zapisal to verzijo])
!-->
CREATE OR REPLACE FUNCTION insert_vrste(vime character varying(120), idrazreda integer, idkraja integer)
RETURNS void 
AS 
$$
DECLARE
	idje integer;
	novidv integer;
BEGIN
	INSERT INTO vrste(ime, razred_id) 
	VALUES (vime, (
		SELECT id_r
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_r) AS RowNum, id_r
            
        FROM
            razredi
    ) sub
WHERE
    RowNum = idrazreda)
);
novidv := (SELECT MAX(id_v) FROM vrste);

FOR idje IN SELECT kv.id_kv FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
INNER JOIN vrste v ON v.id_v=kv.vrsta_id
WHERE kv.kraj_id=idkraja AND kv.vrsta_id=novidv
LOOP
	IF (idje = TRUE) THEN
			UPDATE kraj_vrsta
			SET povp_stevilo = povp_stevilo + 1
			WHERE (kraj_id = idkraja) AND (vrsta_id = novidv);
	END IF;

	IF (idje = FALSE) THEN
			INSERT INTO kraj_vrsta(povp_stevilo, kraj_id, vrsta_id)
			VALUES (1, (
				SELECT id_k
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

				FROM
					kraji
			) sub
		WHERE
			RowNum = idkraja), novidv);
	END IF;
END LOOP;
END;
$$
LANGUAGE 'plpgsql'; 

INSERT VRSTE (zamenjano z INSERT VRSTE IN KRAJ_VRSTE)
CREATE OR REPLACE FUNCTION insert_vrste(vime character varying(120), idrazreda  integer)
RETURNS void 
AS 
$$
BEGIN
	INSERT INTO vrste(ime, razred_id) 
	VALUES (vime, (
		SELECT id_r
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_r) AS RowNum, id_r
            
        FROM
            razredi
    ) sub
WHERE
    RowNum = idrazreda)
);
END;
$$
LANGUAGE 'plpgsql';
CALL:
SELECT insert_vrste('test', 4);

INSERT KRAJ_VRSTE (insert-a ob insert VRSTA) (zamenjano z INSERT VRSTE IN KRAJ_VRSTE)
Vnaša v kraj_vrste: v idje vnese sintakso od select tabele, če se vnašena id-ja (od vrste in kraja) ujemata z id kraj_vrste tabele KI ŽE IMA ista id-ja v tujih ključih kraj_id in vrsta_id; potem samo poveča število “živalskih vrst v tem kraji” za 1 (UPDATE stavek)
Če se vnešena id-ja ne pojavita ISTOČASNO (AND) v nobeni vrstici kraj_vrste tabele; potem ustvari novo vrstico, s tema id-jema in nastavi število na 1 
CREATE OR REPLACE FUNCTION insert_kraj_vrste(idkraja integer, idvrste integer)
RETURNS void 
AS 
$$
DECLARE
	idje integer;
BEGIN
FOR idje IN SELECT kv.id_kv FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
INNER JOIN vrste v ON v.id_v=kv.vrsta_id
WHERE kv.kraj_id=idkraja AND kv.vrsta_id=idvrste
LOOP
	IF (idje = TRUE) THEN
			UPDATE kraj_vrsta
			SET povp_stevilo = povp_stevilo + 1
			WHERE (kraj_id = idkraja) AND (vrsta_id = idvrste);
	END IF;

	IF (idje = FALSE) THEN
			INSERT INTO kraj_vrsta(povp_stevilo, kraj_id, vrsta_id)
			VALUES (1, (
				SELECT id_k
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

				FROM
					kraji
			) sub
		WHERE
			RowNum = idkraja), (
				SELECT id_v
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v

				FROM
					vrste
			) sub
		WHERE
			RowNum = idvrste)	
		);
	END IF;
END LOOP;
END;
$$
LANGUAGE 'plpgsql';

UPDATE KRAJ_VRSTE Z CHECK SQL
CREATE OR REPLACE FUNCTION update_kraj_vrste(idkraja integer, idvrste integer)
RETURNS void 
AS 
$$
BEGIN	

	IF EXISTS(SELECT kv.id_kv FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
INNER JOIN vrste v ON v.id_v=kv.vrsta_id
WHERE kv.kraj_id=idkraja AND kv.vrsta_id=idvrste) THEN
			UPDATE kraj_vrsta
			SET povp_stevilo = povp_stevilo - 1
			WHERE (kraj_id != (
			SELECT id_k
	FROM
		(
			SELECT
				ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

			FROM
				kraji
		) sub
	WHERE
		RowNum = idkraja)) AND 
		(vrsta_id = (
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste));
	
	UPDATE kraj_vrsta
			SET povp_stevilo = povp_stevilo + 1
			WHERE (kraj_id = (
			SELECT id_k
	FROM
		(
			SELECT
				ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

			FROM
				kraji
		) sub
	WHERE
		RowNum = idkraja)) AND 
		(vrsta_id = (
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste)); 
	END IF;

	IF NOT EXISTS (SELECT kv.id_kv FROM kraji k INNER JOIN kraj_vrsta kv ON k.id_k=kv.kraj_id 
INNER JOIN vrste v ON v.id_v=kv.vrsta_id
WHERE kv.kraj_id=idkraja AND kv.vrsta_id=idvrste) THEN
			INSERT INTO kraj_vrsta(povp_stevilo, kraj_id, vrsta_id)
			VALUES (1, (
				SELECT id_k
		FROM
			(
				SELECT
					ROW_NUMBER () OVER (ORDER BY id_k) AS RowNum, id_k

				FROM
					kraji
			) sub
		WHERE
			RowNum = idkraja), (
		SELECT id_v
FROM
    (
        SELECT
            ROW_NUMBER () OVER (ORDER BY id_v) AS RowNum, id_v
            
        FROM
            vrste
    ) sub
WHERE
    RowNum = idvrste));
	END IF;
END;
$$
LANGUAGE 'plpgsql';
TRIGGER ZA KRAJ_VRSTE UPDATE – PO UPDATE VRSTE
CREATE OR REPLACE TRIGGER posodobi_kraj_vrste
AFTER UPDATE ON vrste
FOR EACH ROW EXECUTE PROCEDURE update_kraj_vrste();
